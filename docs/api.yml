openapi: 3.0.3
info:
  title: Library API
  version: 1.4.0
  description: STD22026
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
  - Topics
  - Visitor
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /books/{bookId}/authors/{authorId}:
    put:
      summary: Modify the author of a book
      operationId: modifyBookAuthor
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          description: ID of the book to be modified
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the author to be attached to the book
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /books/authors:
    put:
      summary: Update book authors in bulk
      operationId: updateBookAuthors
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /books/{bookId}/topics/{topicsId}:
    put:
      summary: Update the topic of a book
      operationId: updateBookTopic
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: string
        - name: topicsId
          in: path
          description: ID of the new topic
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /books/topics:
    put:
      summary: Update the list of available book topics
      operationId: updateBookTopics
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'


  /books/import:
    post:
      summary: Import a list of books
      operationId: importBooks
      tags:
        - Books
      requestBody:
        description: The file to import in either JSON or Excel format.
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBookExcel'
                - $ref: '#/components/schemas/ImportBookJSON'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'

      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'
  /topics:
    get:
      summary: Get all available topics
      operationId: getTopics
      tags:
        - Topics
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          $ref: '#/components/responses/TopicsList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'
    put:
      summary: Update the list of available topics
      operationId: updateTopics
      tags:
        - Topics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/TopicsList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'
  /topics{tId}:
    delete:
      summary: Delete a topic
      operationId: deleteTopic
      tags:
        - Topics
      parameters:
        - name: tId
          in: path
          description: ID of the topic to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/TopicsList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'
  /authorTopics:
    get:
      summary: Get a list of AuthorTopic items.
      operationId: getAuthorTopics
      tags:
        - Topics
      parameters:
        - name: authorId
          in: query
          description: Optional author ID to filter the AuthorTopic items.
          required: false
          schema:
            type: string
        - name: authorName
          in: query
          description: Optional author name to filter the AuthorTopic items.
          required: false
          schema:
            type: string
        - name: authorSex
          in: query
          description: Optional author sex (M or F) to filter the AuthorTopic items.
          required: false
          schema:
            $ref: '#/components/schemas/Sex'
        - name: topics
          in: query
          description: Optional list of topics to filter the AuthorTopic items.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: List of AuthorTopic items.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    authorId:
                      type: string
                    authorName:
                      type: string
                    authorSex:
                      type: string
                      enum:
                        - M
                        - F
                    topics:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topic'
  /authors/import:
    post:
      summary: Import a list of authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        description: The file to import in either JSON or Excel format.
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthorExcel'
                - $ref: '#/components/schemas/ImportAuthorJSON'
      responses:
        200:
          $ref: '#/components/responses/TopicsList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'

  /visitors:
    get:
      tags:
        - Visitor
      summary: get all visitor
      description: Get the List of the visitor
      operationId: getVisitor
      responses:
        200 :
          $ref: '#/components/responses/ErrorRequest_500'
    put:
      tags:
        - Visitor
      summary : Update the visitor
      operationId: updateVisitor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Visitor'
      responses:
        200:
          $ref: '#/components/responses/VisitorList_200'
        400:
          $ref:  '#/components/responses/BadRequest_400'
        403:
          $ref:  '#/components/responses/ForbiddenRequest_403'
        500:
          $ref:  '#/components/responses/ErrorRequest_500'

  /visitors/{visitorId}:
    delete:
      summary: Delete visitor in ID
      tags:
        - Visitor
      parameters:
        - name: visitorId
          in: path
          required: true
          description: Visitor identifier to be deleted
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/responses/VisitorList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/ForbiddenRequest_403'
        500:
          $ref: '#/components/responses/ErrorRequest_500'




components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - properties:
            author:
              $ref: '#/components/schemas/Author'
            topic:
              $ref: '#/components/schemas/Topic'
    Visitor:
      type: object
      properties:
        idVisitor:
          type: string
        name:
          type: string
        reference:
          type: string


    ImportAuthorExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

    ImportAuthorJSON:
      type: object
      properties:
        jsonFile:
          type: string
          format: binary

    Topic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    Author:
      type: object
      properties:
        idAuthor:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ImportBookExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

    ImportBookJSON:
      type: object
      properties:
        jsonFile:
          type: string
          format: binary


    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: ID of the book
        authorId:
          type: string
          description: ID of the author

    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object

    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: { }


    ForbiddenRequest:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: { }

    ServerErrorRequest:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Internal servor error
        body: { }
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'
    TopicsListBody :
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
    VisitorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Visitor'

  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    AuthorList_200:
      description: List of authors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorListBody'
    TopicsList_200:
      description: List of topics
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicsListBody'
    VisitorList_200:
      description: List of visitor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VisitorListBody'

    BadRequest_400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    ForbiddenRequest_403:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenRequest'
    ErrorRequest_500:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorRequest'


  parameters:
    Page:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    Size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50




