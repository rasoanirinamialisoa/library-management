openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22026
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
  - Topics
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
        500:

    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Modify the author of a book
      operationId: modifyBookAuthor
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          description: ID of the book to be modified
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the author to be attached to the book
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/authors:
    put:
      summary: Update book authors in bulk
      operationId: updateBookAuthors
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/{bookId}/topics/{topicsId}:
    put:
      summary: Update the topic of a book
      operationId: updateBookTopic
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: string
        - name: topicsId
          in: path
          description: ID of the new topic
          required: true
          schema:
            type: string
      responses:
          200:
            $ref: '#/components/responses/BookResponse200'
          400:
            $ref: '#/components/responses/BookResponse400'
          403:
            $ref: '#/components/responses/BookResponse403'
          500:
            $ref: '#/components/responses/BookResponse500'
  /books/topics:
    put:
      summary: Update the list of available book topics
      operationId: updateBookTopics
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
          $ref: '#/components/responses/BookResponse403'
        500:
          $ref: '#/components/responses/BookResponse500'

  /books/import:
    post:
      summary: Import a list of books
      operationId: importBooks
      tags:
        - Books
      requestBody:
        description: The file to import in either JSON or Excel format.
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          $ref: '#/components/responses/BookResponse200'
        400:
          $ref: '#/components/responses/BookResponse400'
        403:
          $ref: '#/components/responses/BookResponse403'
        500:
          $ref: '#/components/responses/BookResponse500'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'

      responses:
        200:
          $ref: '#/components/responses/AuthorResponse200'
        400:
          $ref: '#/components/responses/AuthorResponse400'
        403:
          $ref: '#/components/responses/AuthorResponse403'
        500:
          $ref: '#/components/responses/AuthorResponse500'

    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/AuthorResponse200'
        400:
          $ref: '#/components/responses/AuthorResponse400'
        403:
          $ref: '#/components/responses/AuthorResponse403'
        500:
          $ref: '#/components/responses/AuthorResponse500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/AuthorResponse200'
        400:
          $ref: '#/components/responses/AuthorResponse400'
        403:
          $ref: '#/components/responses/AuthorResponse403'
        500:
          $ref: '#/components/responses/AuthorResponse500'
  /topics:
    get:
      summary: Get all available topics
      operationId: getTopics
      tags:
        - Topics
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          $ref: '#/components/responses/TopicResponse200'
        400:
          $ref: '#/components/responses/TopicResponse400'
        403:
          $ref: '#/components/responses/TopicResponse403'
        500:
          $ref: '#/components/responses/TopicResponse500'
    put:
      summary: Update the list of available topics
      operationId: updateTopics
      tags:
        - Topics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/TopicResponse200'
        400:
          $ref: '#/components/responses/TopicResponse400'
        403:
          $ref: '#/components/responses/TopicResponse403'
        500:
          $ref: '#/components/responses/TopicResponse500'
  /topics{tId}:
    delete:
      summary: Delete a topic
      operationId: deleteTopic
      tags:
        - Topics
      parameters:
        - name: tId
          in: path
          description: ID of the topic to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/TopicResponse200'
        400:
          $ref: '#/components/responses/TopicResponse400'
        403:
          $ref: '#/components/responses/TopicResponse403'
        500:
          $ref: '#/components/responses/TopicResponse500'
  /authorTopics:
    get:
      summary: Get a list of AuthorTopic items.
      operationId: getAuthorTopics
      tags:
        - Topics
      parameters:
        - name: authorId
          in: query
          description: Optional author ID to filter the AuthorTopic items.
          required: false
          schema:
            type: string
        - name: authorName
          in: query
          description: Optional author name to filter the AuthorTopic items.
          required: false
          schema:
            type: string
        - name: authorSex
          in: query
          description: Optional author sex (M or F) to filter the AuthorTopic items.
          required: false
          schema:
            $ref: '#/components/schemas/Sex'
        - name: topics
          in: query
          description: Optional list of topics to filter the AuthorTopic items.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: List of AuthorTopic items.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    authorId:
                      type: string
                    authorName:
                      type: string
                    authorSex:
                      type: string
                      enum:
                        - M
                        - F
                    topics:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topic'
  /authors/import:
    post:
      summary: Import a list of authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        description: The file to import in either JSON or Excel format.
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          $ref: '#/components/responses/AuthorResponse200'
        400:
          $ref: '#/components/responses/AuthorResponse400'
        403:
          $ref: '#/components/responses/AuthorResponse403'
        500:
          $ref: '#/components/responses/AuthorResponse500'

components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - properties:
            author:
              $ref: '#/components/schemas/Author'
            topic:
              $ref: '#/components/schemas/Topic'
    ImportBook:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        idAuthor:
          type: string
    Topic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    Author:
      type: object
      properties:
        idAuthor:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ImportAuthor:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/Author'

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: ID of the book
        authorId:
          type: string
          description: ID of the author

  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      name: pageSize
      in: path
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50

  responses:
    ResponseBase:
      description: Base structure for a successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string

    AuthorResponse200:
      description: Successful response with a list of authors
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/responses/ResponseBase'
              - properties:
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
    BookResponse200:
      description: Successful response with a list of book
      content:
        applicatio/json:
          schema:
            allOf:
              - $ref: '#/components/responses/ResponseBase'
              - properties:
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
    TopicResponse200:
      description: Successful response with a list of topic
      content:
        applicatio/json:
          schema:
            allOf:
              - $ref: '#/components/responses/ResponseBase'
              - properties:
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'

    BookResponse400:
      description: Bad Request for Book entity
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/responses/ResponseBase'
              - properties:
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'

    TopicResponse400:
        description: Bad Request for Topic entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/ResponseBase'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topic'

    AuthorResponse400:
        description: Bad Request for Author entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/ResponseBase'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Author'
    Response403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/responses/ResponseBase'

    BookResponse403:
        description: Forbidden for Book entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response403'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Book'

    TopicResponse403:
        description: Forbidden for Topic entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response403'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topic'

    AuthorResponse403:
        description: Forbidden for Author entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response403'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Author'
    Response500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/responses/ResponseBase'

    BookResponse500:
        description: Internal Server Error for Book entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response500'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Book'

    TopicResponse500:
        description: Internal Server Error for Topic entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response500'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topic'

    AuthorResponse500:
        description: Internal Server Error for Author entity
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Response500'
                - properties:
                    body:
                      type: array
                      items:
                        $ref: '#/components/schemas/Author'


