openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22020
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
components:
  parameters:
    Page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1

    Size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100

  responses:
    ErrorResponse:
      description: Default error response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        topic:
          type: string
        status:
          type: string  # 'available' or 'borrowed'

    Visitor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reference:
          type: string

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Returns a list of all books.
      operationId: getBooks
      parameters:
        - in: query
          name: title
          description: Filter return books by given title
          required: false
          schema:
            type: string
        - in: query
          name: author
          description: Filter return books by author
          required: false
          schema:
            type: string
        - in: query
          name: topic
          description: Filter return books by topic
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'

    put:
      tags:
        - Books
      summary: Create or update
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'

    post:
      tags:
        - Books
      summary: Borrow a book
      operationId: borrowBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                visitorId:
                  type: integer
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /books/return:
    post:
      tags:
        - Books
      summary: Return a borrowed book
      operationId: returnBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                visitorId:
                  type: integer
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /books/borrowed:
    get:
      tags:
        - Books
      summary: Get list of borrowed books
      operationId: getBorrowedBooks
      responses:
        200:
          description: List of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'

  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Get visitor activities
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
        - in: query
          name: startDate
          description: Start date for filtering activities
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date for filtering activities
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of visitor activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'
  www.library.com
  Naivo ðŸ˜Ž
  NantÃ© Ranaivosoa
  Mety ve zao ?
  Vous avez envoyÃ©
  Alefaso fona aloha d refa aminy farany atao fusion
  Naivo ðŸ˜Ž
  NantÃ© Ranaivosoa
  okay
  Naivo ðŸ˜Ž
  NantÃ© Ranaivosoa
  Vita le Partie voalohany
  Vous avez envoyÃ©
  le faharoa zany sisa.
  Vous avez envoyÃ©
  alefaso aty fa za kamo b anao anle faharoa
  Naivo ðŸ˜Ž
  NantÃ© Ranaivosoa
openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22020
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
components:
  parameters:
    Page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1

    Size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100

  responses:
    ErrorResponse:
      description: Default error response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        topic:
          type: string
        status:
          type: string  # 'available' or 'borrowed'

    Visitor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reference:
          type: string

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Returns a list of all books.
      operationId: getBooks
      parameters:
        - in: query
          name: title
          description: Filter return books by given title
          required: false
          schema:
            type: string
        - in: query
          name: author
          description: Filter return books by author
          required: false
          schema:
            type: string
        - in: query
          name: topic
          description: Filter return books by topic
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'

    put:
      tags:
        - Books
      summary: Create or update
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'

    post:
      tags:
        - Books
      summary: Borrow a book
      operationId: borrowBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                visitorId:
                  type: integer
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /books/return:
    post:
      tags:
        - Books
      summary: Return a borrowed book
      operationId: returnBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                visitorId:
                  type: integer
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /books/borrowed:
    get:
      tags:
        - Books
      summary: Get list of borrowed books
      operationId: getBorrowedBooks
      responses:
        200:
          description: List of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'

  /visitors:
    get:
      tags:
        - Visitors
      summary: Get all visitors
      description: Returns a list of all visitors.
      operationId: getVisitors
      responses:
        200:
          description: List of visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
  /visitors/{visitorId}/borrowed-books:
    get:
      tags:
        - Visitors
      summary: Get books borrowed by a visitor
      operationId: getBorrowedBooksByVisitor
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of borrowed books by the visitor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'

    post:
      tags:
        - Visitors
      summary: Borrow a book
      operationId: borrowBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /visitors/{visitorId}/return-book:
    post:
      tags:
        - Visitors
      summary: Return a borrowed book
      operationId: returnBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/ErrorResponse'

  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Get visitor activities
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
        - in: query
          name: startDate
          description: Start date for filtering activities
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date for filtering activities
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of visitor activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /authors/import:
    post:
      summary: Import a list of authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        description: The file to import
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthorExcel'
                - $ref: '#/components/schemas/ImportAuthorJSON'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/ErrorResponse'

  /authors/import:
    post:
      summary: Import a list of authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        description: The file to import
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthorExcel'
                - $ref: '#/components/schemas/ImportAuthorJSON'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /visitors/import:
    post:
      summary: Import a list of visitors
      operationId: importVisitors
      tags:
        - Visitors
      requestBody:
        description: The file to import
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportVisitorExcel'
                - $ref: '#/components/schemas/ImportVisitorJSON'
      responses:
        200:
          description: List of imported visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /visitors/{visitorId}:
    get:
      tags:
        - Visitors
      summary: Get visitor by ID
      operationId: getVisitorById
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Details of the visitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/ErrorResponse'